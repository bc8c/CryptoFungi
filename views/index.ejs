<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crypto Fungi</title>
    <link rel="stylesheet" href="/css/style.css" />
    <script src="https://kit.fontawesome.com/1584e6b51a.js" crossorigin="anonymous"></script>
    <script
      src="https://code.jquery.com/jquery-3.6.0.min.js"
      integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
      crossorigin="anonymous"
    ></script>
    <script src="/scripts/web3/dist/web3.min.js"></script>
    <script src="/js/cryptoFungiABI.js"></script>
  </head>
  <body>
    <div class="header">
      <div class="title">Crypto Fungi</div>
      <button class="modal-open" id="btnSetFeedFactoryContractAddress">먹이 컨트랙트 주소 변경하기</button>
    </div>
    <hr />

    <div id="alert" class="alert"></div>

    <div class="container">
      <div class="fungi" id="fungi">
        <div class="fungus">
          <button>균 생성하기 <i id="btnCreate" class="fas fa-plus-circle"></i></button>
        </div>

        <div class="fungus">
          <div class="image">
            <object id="fungusobject" type="image/svg+xml" data="/img/fungus.svg"></object>
            <div class="middle">
              <div class="button-wrap">
                <button class="modal-open" id="btnFeed" data-fungusid="0">먹이 주기</button>
                <button class="modal-open" id="btnApprove" data-fungusid="0">전송 권한 위임</button>
                <button class="modal-open" id="btnTransferFrom" data-fungusid="0">전송하기</button>
              </div>
            </div>
          </div>
          <hr />
          <div class="name">곰팡이(예시, 연결되지 않음)</div>
          <div class="dna">DNA: 87637647688900</div>
          <div class="ready">Ready at 00:00:00</div>
        </div>
      </div>
    </div>

    <!-- 먹이 컨트랙트 주소 변경하기 팝업 모달 -->
    <div class="popup-wrap" id="modalSetFeedFactoryContractAddress">
      <div class="popup">
        <div class="popup-head">
          <span class="head-title">먹이 컨트랙트 주소 변경하기</span>
        </div>
        <div class="popup-body">
          <div class="body-content">
            <div class="body-contentbox">
              주소<input id="txtContractAddress" type="text" placeholder="배포한 먹이 컨트랙트의 주소 (ex. 0x...)" />
            </div>
            <div class="body-contentbox alert"></div>
          </div>
        </div>
        <div class="popup-foot">
          <span class="pop-btn submit">확인</span>
          <span class="pop-btn close">창 닫기</span>
        </div>
      </div>
    </div>

    <!-- 균 생성하기 팝업 모달 -->
    <div class="popup-wrap" id="modalCreateRandomFungus">
      <div class="popup">
        <div class="popup-head">
          <span class="head-title">균 생성하기</span>
        </div>
        <div class="popup-body">
          <div class="body-content">
            <div class="body-contentbox">
              이름<input id="txtName" type="text" placeholder="생성할 곰팡이의 이름 (ex. 곰팡이)" />
            </div>
            <div class="body-contentbox alert"></div>
          </div>
        </div>
        <div class="popup-foot">
          <span class="pop-btn submit" id="btnSubmit">확인</span>
          <span class="pop-btn close" id="btnClose">창 닫기</span>
        </div>
      </div>
    </div>

    <!-- 먹이 주기 팝업 모달 -->
    <div class="popup-wrap" id="modalFeed">
      <div class="popup">
        <div class="popup-head">
          <span class="head-title">먹이 주기</span>
        </div>
        <div class="popup-body">
          <div class="body-content">
            <div class="body-contentbox">
              먹이 ID<input id="txtFeedId" type="text" placeholder="Feed의 Index (ex. 0)" />
            </div>
            <div class="body-contentbox alert"></div>
          </div>
        </div>
        <div class="popup-foot">
          <span class="pop-btn submit" id="btnSubmit">확인</span>
          <span class="pop-btn close" id="btnClose">창 닫기</span>
        </div>
      </div>
    </div>

    <!-- 전송 권한 위임 팝업 모달 -->
    <div class="popup-wrap" id="modalApprove">
      <div class="popup">
        <div class="popup-head">
          <span class="head-title">전송 권한 위임</span>
        </div>
        <div class="popup-body">
          <div class="body-content">
            <div class="body-contentbox">
              주소<input id="txtToAddress" type="text" placeholder="전송 권한을 위임할 계정 주소 (ex. 0x...)" />
            </div>
            <div class="body-contentbox alert"></div>
          </div>
        </div>
        <div class="popup-foot">
          <span class="pop-btn submit" id="btnSubmit">확인</span>
          <span class="pop-btn close" id="btnClose">창 닫기</span>
        </div>
      </div>
    </div>

    <!-- 전송 팝업 모달 -->
    <div class="popup-wrap" id="modalTransferFrom">
      <div class="popup">
        <div class="popup-head">
          <span class="head-title">토큰 전송</span>
        </div>
        <div class="popup-body">
          <div class="body-content">
            <div class="body-contentbox">
              보낼 주소<input id="txtFromAddress" type="text" placeholder="토큰을 보내는 주소 (ex. 0x...)" />
            </div>
            <div class="body-contentbox">
              받을 주소<input id="txtToAddress" type="text" placeholder="토큰을 받는 주소 (ex. 0x...)" />
            </div>
            <div class="body-contentbox alert"></div>
          </div>
        </div>
        <div class="popup-foot">
          <span class="pop-btn submit" id="btnSubmit">확인</span>
          <span class="pop-btn close" id="btnClose">창 닫기</span>
        </div>
      </div>
    </div>

    <script>
      let web3, cryptoFungi, account, currentModalId, currentFungusId;

      function getFungusDetail(id) {
        return cryptoFungi.methods.fungi(id).call();
      }

      function fungusToOwner(id) {
        return cryptoFungi.methods.fungusToOwner(id).call();
      }

      function getFungiByOwner(owner) {
        return cryptoFungi.methods.getFungiByOwner(owner).call();
      }

      // 현재 선택된 계정이 보유하고 있는 fungi를 그리는 함수
      function displayFungi(ids) {
        $('#fungi').empty();
        $('#alert').empty();
        if (ids.length < 1) {
          // 보유한 fungus가 없는 경우 균 생성하기 버튼을 그림
          $('#fungi').append(`
            <div class="fungus">
              <button class="modal-open" id="btnCreateRandomFungus">균 생성하기 <i class="fas fa-plus-circle"></i></button>
            </div>`);
          $(`.modal-open`).click(function () {
            const buttonId = $(this).attr('id');
            currentModalId = buttonId.replace('btn', 'modal');
            console.log(currentModalId);
            $(`#${currentModalId}`).css('display', 'flex').hide().fadeIn();
          });
        } else {
          for (const id of ids) {
            getFungusDetail(id).then(function (fungus) {
              const date = new Date(fungus.readyTime * 1000);
              const hours = date.getHours();
              const minutes = `0${date.getMinutes()}`;
              const seconds = `0${date.getSeconds()}`;
              const formattedTime = `${hours}:${minutes.substr(-2)}:${seconds.substr(-2)}`;
              const species = fungus.dna.substr(-2);
              const img = species === '00' ? '/img/fungus.svg' : '/img/mushroom.svg';

              $('#fungi').append(`
                    <div class="fungus" id="fungus${id}">
                      <div class="image">
                        <object id="img${id}" type="image/svg+xml" data="${img}"></object>
                        <div class="middle">
                          <div class="button-wrap">
                            <button class="modal-open" id="btnFeed" data-fungusid="${id}">먹이 주기</button>
                            <button class="modal-open" id="btnApprove" data-fungusid="${id}">전송 권한 위임</button>
                            <button class="modal-open" id="btnTransferFrom" data-fungusid="${id}">전송하기</button>
                          </div>
                        </div>
                      </div>
                      <hr />
                      <div class="name">${fungus.name}</div>
                      <div class="dna">DNA: ${fungus.dna}</div>
                      <div class="ready">Ready at ${formattedTime}</div>
                    </div>`);

              setSVGColor(`img${id}`, dnaToColorHex(fungus.dna));
              addEvents(`fungus${id}`);
            });
          }
        }
      }

      function setFeedFactoryContractAddress(address) {
        $('#alert').text('먹이를 찾는 중...');
        return cryptoFungi.methods
          .setFeedFactoryContractAddress(address)
          .send({ from: account })
          .on('receipt', function (receipt) {
            $('#alert').text('먹이를 찾았습니다!');
          })
          .on('error', function (error) {
            $('#alert').text(error.message);
          });
      }

      function createRandomFungus(name) {
        $('#alert').text('새로운 균을 생성하는 중...');
        return cryptoFungi.methods
          .createRandomFungus(name)
          .send({ from: account })
          .on('receipt', function (receipt) {
            $('#alert').text(`${name}을 생성했습니다!`);
            getFungiByOwner(account).then(displayFungi);
          })
          .on('error', function (error) {
            $('#alert').text(error.message);
          });
      }

      function feed(fungusId, feedId) {
        $('#alert').text('맛있게 식사 중...');
        return cryptoFungi.methods
          .feed(fungusId, feedId)
          .send({ from: account, value: web3.utils.toWei('0.0001') })
          .on('receipt', function (receipt) {
            $('#alert').text('균이 식사를 마쳤습니다. 이제 증식합니다!');
            getFungiByOwner(account).then(displayFungi);
          })
          .on('error', function (error) {
            $('#alert').text(error.message);
          });
      }

      function approve(to, fungusId) {
        $('#alert').text('전송 권한을 부여하는 중...');
        console.log(to, fungusId, account);
        return cryptoFungi.methods
          .approveToken(to, fungusId)
          .send({ from: account })
          .on('receipt', function (receipt) {
            $('#alert').text('지정한 주소로 전송 권한을 부여했습니다!');
          })
          .on('error', function (error) {
            $('#alert').text(error.message);
          });
      }

      function transferFrom(from, to, fungusId) {
        $('#alert').text('소중한 균을 다른 주소로 전송하는 중...');
        return cryptoFungi.methods
          .transferFrom(from, to, fungusId)
          .send({
            from: account
          })
          .on('receipt', function (receipt) {
            $('#alert').text('균을 전송했습니다!');
            getFungiByOwner(account).then(displayFungi);
          })
          .on('error', function (error) {
            $('#alert').text(error.message);
          });
      }

      function strToColorHex(str) {
        return (parseInt(str) % 255).toString(16);
      }

      function dnaToColorHex(dna) {
        const red = strToColorHex(dna.slice(0, 3));
        const green = strToColorHex(dna.slice(3, 6));
        const blue = strToColorHex(dna.slice(6, 9));
        const opacity = strToColorHex(dna.slice(9, 12));
        return `${red}${green}${blue}${opacity}`;
      }

      // Fungus 그림의 색상을 변경하는 함수
      function setSVGColor(svgId, colorHex) {
        const svg = document.getElementById(svgId);
        svg.addEventListener('load', function () {
          const svgDoc = svg.contentDocument;
          const colors = svgDoc.getElementsByClassName('color');
          for (color of colors) {
            color.setAttribute('fill', `#${colorHex}`);
          }
        });
      }

      // 배포된 컨트랙트의 address와 ABI를 사용해서 컨트랙트 객체 생성
      // 생성한 컨트랙트 객체에 접근해서 정의된 함수를 호출할 수 있음
      function startApp() {
        let cryptoFungiAddress = '0x0e3eEA3529d3DD99aeB1eDe93122CF1Dd5B31CF1';
        cryptoFungi = new web3.eth.Contract(cryptoFungiABI, cryptoFungiAddress);

        // 현재 연결된 web3 provider(예제에서는 Metamask)에 있는 계정을 조회하고,
        // 선택된 계정을 현재 계정에 해당하는 account 변수에 할당
        window.ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {
          account = accounts[0];
          getFungiByOwner(account).then(displayFungi);

          // 계정이 변경되는 것을 감지하고,
          // 선택된 계정을 현재 계정에 해당하는 account 변수에 할당
          window.ethereum.on('accountsChanged', function (accounts) {
            account = accounts[0];
            getFungiByOwner(account).then(displayFungi);
          });
        });

        // Transfer 이벤트 구독
        cryptoFungi.events
          // filter 옵션으로 현재 사용중인 계정의 주소가
          // to 변수에 저장된 이벤트만 필터링
          .Transfer({ filter: { to: account } })
          .on('data', function (event) {
            let data = event.returnValues;
            console.log(data);
            getFungiByOwner(account).then(displayFungi);
            $('#alert').text('균을 받았습니다!');
          });
      }

      // 모든 리소스의 로딩이 완료되면 수행
      // 브라우저에 설치된 Web3 provider를 app에 연결
      window.addEventListener('load', function () {
        if (window.ethereum) {
          // latest
          web3 = new Web3(window.ethereum);
          window.ethereum.request({ method: 'eth_requestAccounts' });
        } else if (window.web3) {
          // old
          web3 = window.web3;
          console.log('Injected web3 detected.');
        } else {
          // not found
          const provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');
          web3 = new Web3(provider);
          console.log('No web3 instance injected, using local web3.');
        }

        startApp();
      });

      // 새로 생성된 fungus element에 event를 추가하는 함수
      function addEvents(fungusId) {
        $(`#${fungusId} .modal-open`).click(function () {
          const buttonId = $(this).attr('id');
          currentModalId = buttonId.replace('btn', 'modal');
          currentFungusId = $(this).attr('data-fungusid');
          $(`#${currentModalId}`).css('display', 'flex').hide().fadeIn();
        });
      }

      // 모달 이벤트
      $(function () {
        $(`.submit`).click(function () {
          let name, feedId, address, fromAddress, toAddress;
          switch (currentModalId) {
            case 'modalSetFeedFactoryContractAddress':
              address = $(`#${currentModalId} #txtContractAddress`);
              if (!address.val()) {
                $(`#${currentModalId} .alert`).text('배포한 먹이 컨트랙트의 주소를 입력하세요.');
                return;
              }
              setFeedFactoryContractAddress(address.val());
              address.val('');
              break;

            case 'modalCreateRandomFungus':
              name = $(`#${currentModalId} #txtName`);
              if (!name.val()) {
                $(`#${currentModalId} .alert`).text('새 Fungus의 이름을 입력하세요.');
                return;
              }
              createRandomFungus(name.val());
              name.val('');
              break;

            case 'modalFeed':
              feedId = $(`#${currentModalId} #txtFeedId`);
              if (!feedId.val()) {
                $(`#${currentModalId} .alert`).text('먹이의 ID(index)를 입력하세요.');
                return;
              }
              feed(currentFungusId, feedId.val());
              feedId.val('');
              break;

            case 'modalApprove':
              toAddress = $(`#${currentModalId} #txtToAddress`);
              if (!toAddress.val()) {
                $(`#${currentModalId} .alert`).text('Fungus 전송 권한을 위임할 주소를 입력하세요.');
                return;
              }
              approve(toAddress.val(), currentFungusId);
              toAddress.val();
              break;

            case 'modalTransferFrom':
              fromAddress = $(`#${currentModalId} #txtFromAddress`);
              toAddress = $(`#${currentModalId} #txtToAddress`);
              if (!fromAddress.val()) {
                s;
                $(`#${currentModalId} .alert`).text('Fungus를 보내는 주소를 입력하세요.');
                return;
              }
              if (!toAddress.val()) {
                $(`#${currentModalId} .alert`).text('Fungus를 받을 주소를 입력하세요.');
                return;
              }
              transferFrom(fromAddress.val(), toAddress.val(), currentFungusId);
              fromAddress.val('');
              toAddress.val('');
              break;

            default:
              break;
          }
          modalClose();
        });

        $(`.close`).click(function () {
          modalClose();
        });

        function modalClose() {
          $(`#${currentModalId}`).fadeOut();
        }

        $(`.modal-open`).click(function () {
          const buttonId = $(this).attr('id');
          currentModalId = buttonId.replace('btn', 'modal');
          console.log(currentModalId);
          $(`#${currentModalId}`).css('display', 'flex').hide().fadeIn();
        });
      });
    </script>
  </body>
</html>
